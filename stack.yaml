version: "3.5"

networks:
  prom_network:
    driver: overlay
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: 172.16.2.0/24

# networks:
#   default:
#     external: true
#     name: influx_network

configs:
 telegraf_global:
   file: ./configs/telegraf/telegraf_global.conf
 telegraf:
   file: ./configs/telegraf/telegraf.conf
 prometheus_config:
   file: ./configs/prometheus/prometheus.yaml
 prometheus_alerting_node_rules:
   file: ./configs/prometheus/rules/swarm_node.rules.yml
 prometheus_alerting_task_rules:
   file: ./configs/prometheus/rules/swarm_task.rules.yml
 prometheus_alerting_components_rules:
   file: ./configs/prometheus/rules/swarm_components.rules.yml
 prometheus_alertmanager:
   file: ./configs/prometheus/alertmanager.yaml


services:
  prometheus:
    image: ${PROMETHEUS_IMAGE}
    networks:
      prom_network:
        aliases:
          - prometheus
    # network_mode: "bridge"
    container_name: Prometheus
    ports:
      # - "80:8086"
      - "80:9090"
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_alerting_node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: prometheus_alerting_task_rules
        target: /etc/prometheus/swarm_task.rules.yml
      - source: prometheus_alerting_components_rules
        target: /etc/prometheus/swarm_components.rules.yml
    volumes:
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.wal-compression'
    restart: always
    deploy:
      mode: replicated
      placement:
        constraints:
          - node.role == manager
      replicas: 1
      resources:
        limits:
          cpus: '2'
          memory: 1.5G
        reservations:
          cpus: '0.1'
          memory: 100M

  alertmanager:
    image: ${ALERTMANAGER_IMAGE}
    networks:
      prom_network:
        aliases:
          - alertmanager
    configs:
      - source: prometheus_alertmanager
        target: /etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  telegraf_nodes:
    image: ${TELEGRAF_IMAGE}
    user: telegraf:1000
    networks:
      prom_network:
        aliases:
          - telegraf_nodes
    pid: "host"
    hostname: "{{.Node.Description.Hostname}}"
    # ports: #uncomment if the telegraf port needs to be exposed to the host network
    #   - "8092:8092"
    #   - "8094:8094"
    #   - "8125:8125"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/host/sys:ro
      - /proc:/host/proc:ro
      - /etc:/host/etc:ro
    configs:
      - source: telegraf_global
        target: /etc/telegraf/telegraf.conf
    environment:
      - HOST_PROC=/host/proc
      - HOST_SYS=/host/sys
      - HOST_ETC=/host/etc
    restart: always
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 100M

  telegraf:
    image: ${TELEGRAF_IMAGE}
    user: telegraf:1000
    networks:
      prom_network:
        aliases:
          - telegraf
    pid: "host"
    hostname: "{{.Node.ID}}"
    # ports: #uncomment if the telegraf port needs to be exposed to the host network
    #   - "8082:8092"
    #   - "8084:8094"
    #   - "8185:8125"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    configs:
      - source: telegraf
        target: /etc/telegraf/telegraf.conf
    environment:
      - HOST_PROC=/host/proc
      - HOST_SYS=/host/sys
      - HOST_ETC=/host/etc
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 100M

  grafana8:
    image: ${GRAFANA_IMAGE}
    networks:
      prom_network:
        aliases:
          - grafana
    container_name: grafana8
    volumes:
      - grafana:/var/lib/grafana
    ports:
      - "2000:3000"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 100M

volumes:
  prometheus-data:
  grafana:
  alertmanager:
